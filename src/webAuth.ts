import * as vscode from 'vscode';
import * as http from 'http';
import * as https from 'https';
import * as url from 'url';

export interface WebAuthResult {
    success: boolean;
    cookies?: string;
    error?: string;
}

export class WebAuthManager {
    private readonly AUGMENT_LOGIN_URL = 'https://app.augmentcode.com';
    private readonly AUGMENT_DASHBOARD_URL = 'https://app.augmentcode.com/dashboard';
    private readonly CALLBACK_PORT = 3000;
    private server: http.Server | null = null;

    async authenticateWithWebLogin(): Promise<WebAuthResult> {
        try {
            // ÊòæÁ§∫ËøõÂ∫¶ÊèêÁ§∫
            return await vscode.window.withProgress({
                location: vscode.ProgressLocation.Notification,
                title: "Augment Web Authentication",
                cancellable: true
            }, async (progress, token) => {
                
                progress.report({ increment: 0, message: "Opening Augment login page..." });
                
                // ÊâìÂºÄÁôªÂΩïÈ°µÈù¢
                const loginUri = vscode.Uri.parse(this.AUGMENT_LOGIN_URL);
                await vscode.env.openExternal(loginUri);
                
                progress.report({ increment: 25, message: "Please login in your browser..." });
                
                // Á≠âÂæÖÁî®Êà∑ÁôªÂΩï
                const loginChoice = await vscode.window.showInformationMessage(
                    'üåê Please login to Augment in your browser, then click "Continue" when you reach the dashboard.',
                    { modal: false },
                    'Continue',
                    'Cancel'
                );
                
                if (loginChoice !== 'Continue') {
                    return { success: false, error: 'User cancelled authentication' };
                }
                
                progress.report({ increment: 50, message: "Waiting for cookie input..." });
                
                // ÊèêÁ§∫Áî®Êà∑Ëé∑Âèñcookie
                const cookieInstructions = await vscode.window.showInformationMessage(
                    'üç™ Now we need to get your session cookies:\n\n' +
                    '1. In your browser, press F12 to open Developer Tools\n' +
                    '2. Go to Application tab ‚Üí Cookies ‚Üí app.augmentcode.com\n' +
                    '3. Copy all cookie values\n\n' +
                    'Or use our automatic cookie extractor!',
                    'Auto Extract',
                    'Manual Input',
                    'Cancel'
                );
                
                if (cookieInstructions === 'Cancel') {
                    return { success: false, error: 'User cancelled cookie extraction' };
                }
                
                progress.report({ increment: 75, message: "Getting cookies..." });
                
                if (cookieInstructions === 'Auto Extract') {
                    return await this.startAutoSessionExtraction();
                } else {
                    return await this.manualCookieInput();
                }
            });
            
        } catch (error) {
            return {
                success: false,
                error: `Authentication failed: ${error}`
            };
        }
    }

    private async autoExtractCookies(): Promise<WebAuthResult> {
        try {
            // ÊòæÁ§∫JavaScript‰ª£Á†ÅËÆ©Áî®Êà∑Âú®ÊµèËßàÂô®ÊéßÂà∂Âè∞ÊâßË°å
            const jsCode = `
// Augment Cookie Extractor
(function() {
    const cookies = document.cookie;
    if (cookies.includes('_session=')) {
        console.log('‚úÖ Cookies extracted successfully!');
        console.log('üìã Copy the following line:');
        console.log('COOKIES_START');
        console.log(cookies);
        console.log('COOKIES_END');
        
        // Â∞ùËØïÂ§çÂà∂Âà∞Ââ™Ë¥¥Êùø
        if (navigator.clipboard) {
            navigator.clipboard.writeText(cookies).then(() => {
                console.log('‚úÖ Cookies copied to clipboard!');
            }).catch(() => {
                console.log('‚ö†Ô∏è Please manually copy the cookies above');
            });
        }
        
        alert('‚úÖ Cookies extracted! Check console and paste in VSCode.');
        return cookies;
    } else {
        console.log('‚ùå No valid session found. Please make sure you are logged in.');
        alert('‚ùå Please login first, then run this script again.');
        return null;
    }
})();`;

            // ÊòæÁ§∫JavaScript‰ª£Á†Å
            const doc = await vscode.workspace.openTextDocument({
                content: jsCode,
                language: 'javascript'
            });
            await vscode.window.showTextDocument(doc);
            
            const instruction = await vscode.window.showInformationMessage(
                'üîß Auto Cookie Extractor:\n\n' +
                '1. Copy the JavaScript code shown above\n' +
                '2. In your browser (on app.augmentcode.com), press F12\n' +
                '3. Go to Console tab\n' +
                '4. Paste and press Enter\n' +
                '5. Copy the cookies output\n' +
                '6. Click "Paste Cookies" below',
                'Paste Cookies',
                'Cancel'
            );
            
            if (instruction === 'Paste Cookies') {
                return await this.manualCookieInput();
            } else {
                return { success: false, error: 'User cancelled auto extraction' };
            }
            
        } catch (error) {
            return {
                success: false,
                error: `Auto extraction failed: ${error}`
            };
        }
    }

    private async manualCookieInput(): Promise<WebAuthResult> {
        const cookies = await vscode.window.showInputBox({
            prompt: 'Paste your Augment cookies here',
            placeHolder: 'intercom-id-oiuh4kg0=...; _session=...; ajs_user_id=...',
            password: true,
            ignoreFocusOut: true,
            validateInput: (value) => {
                if (!value || value.trim().length === 0) {
                    return 'Cookies cannot be empty';
                }
                if (!value.includes('_session=')) {
                    return 'Invalid cookies - should contain _session=';
                }
                if (!value.includes('ajs_user_id=')) {
                    return 'Invalid cookies - should contain ajs_user_id=';
                }
                return null;
            }
        });

        if (cookies) {
            return {
                success: true,
                cookies: cookies.trim()
            };
        } else {
            return {
                success: false,
                error: 'No cookies provided'
            };
        }
    }

    async quickLogin(): Promise<WebAuthResult> {
        // ÁÆÄÂåñÁöÑÁôªÂΩïÊµÅÁ®ã
        const choice = await vscode.window.showQuickPick([
            {
                label: 'üåê Web Login',
                description: 'Open browser and login automatically',
                detail: 'Recommended for first-time setup'
            },
            {
                label: 'üç™ Paste Cookies',
                description: 'Manually paste cookies from browser',
                detail: 'Quick option if you already have cookies'
            },
            {
                label: 'üîë API Token',
                description: 'Use API token instead',
                detail: 'For advanced users'
            }
        ], {
            placeHolder: 'Choose authentication method',
            ignoreFocusOut: true
        });

        if (!choice) {
            return { success: false, error: 'No authentication method selected' };
        }

        switch (choice.label) {
            case 'üåê Web Login':
                return await this.authenticateWithWebLogin();
            case 'üç™ Paste Cookies':
                return await this.manualCookieInput();
            case 'üîë API Token':
                // ËøôÈáåÂèØ‰ª•Ë∞ÉÁî®API tokenËÆæÁΩÆ
                return { success: false, error: 'API token setup not implemented in this method' };
            default:
                return { success: false, error: 'Unknown authentication method' };
        }
    }

    async validateCookies(cookies: string): Promise<boolean> {
        // ÁÆÄÂçïÁöÑcookieÊ†ºÂºèÈ™åËØÅ
        const requiredCookies = ['_session', 'ajs_user_id'];
        return requiredCookies.every(cookieName => 
            cookies.includes(cookieName + '=')
        );
    }

    generateCookieExtractionScript(): string {
        return `
// üç™ Augment Cookie Extractor Script
// Run this in browser console on app.augmentcode.com

(function() {
    console.log('üîç Extracting Augment cookies...');
    
    const cookies = document.cookie;
    const domain = window.location.hostname;
    
    console.log('üåê Domain:', domain);
    console.log('üìä Total cookies:', document.cookie.split(';').length);
    
    if (!cookies.includes('_session=')) {
        console.error('‚ùå No session cookie found. Please login first.');
        alert('‚ùå Please login to Augment first, then run this script again.');
        return null;
    }
    
    console.log('‚úÖ Session cookie found!');
    console.log('üìã Cookies to copy:');
    console.log('--- COPY BELOW ---');
    console.log(cookies);
    console.log('--- COPY ABOVE ---');
    
    // Try to copy to clipboard
    if (navigator.clipboard && window.isSecureContext) {
        navigator.clipboard.writeText(cookies).then(() => {
            console.log('‚úÖ Cookies copied to clipboard!');
            alert('‚úÖ Cookies copied to clipboard! Paste them in VSCode.');
        }).catch(err => {
            console.log('‚ö†Ô∏è Could not copy to clipboard:', err);
            alert('‚ö†Ô∏è Please manually copy the cookies from console.');
        });
    } else {
        console.log('‚ö†Ô∏è Clipboard not available. Please copy manually.');
        alert('‚ö†Ô∏è Please manually copy the cookies from console.');
    }
    
    return cookies;
})();`;
    }

    async startAutoSessionExtraction(): Promise<WebAuthResult> {
        return new Promise((resolve, reject) => {
            // ÂàõÂª∫Êú¨Âú∞ÊúçÂä°Âô®ÁõëÂê¨ÂõûË∞É
            this.server = http.createServer((req, res) => {
                const parsedUrl = url.parse(req.url || '', true);

                if (parsedUrl.pathname === '/extract-session') {
                    // Â§ÑÁêÜsessionÊèêÂèñËØ∑Ê±Ç
                    this.handleSessionExtraction(req, res, resolve, reject);
                } else if (parsedUrl.pathname === '/api-extract') {
                    // Â§ÑÁêÜAPIÂìçÂ∫îÂ§¥ÊèêÂèñ
                    this.handleApiExtraction(req, res, resolve, reject);
                } else {
                    // Êèê‰æõCookieÊèêÂèñÈ°µÈù¢
                    this.serveCookieExtractorPage(res);
                }
            });

            this.server.listen(this.CALLBACK_PORT, () => {
                // ÊâìÂºÄÊµèËßàÂô®Âà∞CookieÊèêÂèñÈ°µÈù¢
                const extractorUrl = `http://localhost:${this.CALLBACK_PORT}`;
                vscode.env.openExternal(vscode.Uri.parse(extractorUrl));

                vscode.window.showInformationMessage(
                    `üîÑ Ëá™Âä®CookieÊèêÂèñÂô®Â∑≤ÂêØÂä®ÔºÅ\n\n` +
                    `1. ÊµèËßàÂô®Â∞ÜÊâìÂºÄÊèêÂèñÈ°µÈù¢\n` +
                    `2. ÊîØÊåÅÂ§öÁßçÊèêÂèñÊñπÊ≥ï\n` +
                    `3. CookieÂ∞ÜËá™Âä®‰º†ÂõûVSCode\n\n` +
                    `Â¶ÇÊûúÊµèËßàÂô®Êú™Ëá™Âä®ÊâìÂºÄÔºåËØ∑ËÆøÈóÆ: http://localhost:${this.CALLBACK_PORT}`,
                    'OK'
                );

                // ËÆæÁΩÆË∂ÖÊó∂
                setTimeout(() => {
                    this.cleanup();
                    reject(new Error('Authentication timeout (5 minutes)'));
                }, 300000); // 5ÂàÜÈíüË∂ÖÊó∂
            });

            this.server.on('error', (error) => {
                console.error('Server error:', error);
                this.cleanup();
                reject(error);
            });
        });
    }

    private handleSessionExtraction(req: http.IncomingMessage, res: http.ServerResponse, resolve: (value: WebAuthResult) => void, reject: (reason?: any) => void) {
        if (req.method === 'POST') {
            let body = '';
            req.on('data', chunk => {
                body += chunk.toString();
            });

            req.on('end', () => {
                try {
                    const data = JSON.parse(body);
                    if (data.cookies && data.cookies.includes('_session=')) {
                        res.writeHead(200, {
                            'Content-Type': 'application/json',
                            'Access-Control-Allow-Origin': '*'
                        });
                        res.end(JSON.stringify({ success: true, message: 'Cookies received successfully' }));

                        this.cleanup();
                        resolve({
                            success: true,
                            cookies: data.cookies
                        });
                    } else {
                        res.writeHead(400, {
                            'Content-Type': 'application/json',
                            'Access-Control-Allow-Origin': '*'
                        });
                        res.end(JSON.stringify({ success: false, message: 'No _session cookie found' }));

                        this.cleanup();
                        reject(new Error('No _session cookie found'));
                    }
                } catch (error) {
                    res.writeHead(400, {
                        'Content-Type': 'application/json',
                        'Access-Control-Allow-Origin': '*'
                    });
                    res.end(JSON.stringify({ success: false, message: 'Invalid JSON' }));

                    this.cleanup();
                    reject(error);
                }
            });
        } else if (req.method === 'OPTIONS') {
            // Â§ÑÁêÜCORSÈ¢ÑÊ£ÄËØ∑Ê±Ç
            res.writeHead(200, {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type'
            });
            res.end();
        } else {
            res.writeHead(405, { 'Content-Type': 'text/plain' });
            res.end('Method Not Allowed');
        }
    }

    private serveCookieExtractorPage(res: http.ServerResponse) {
        const html = `
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Augment Cookie Ëá™Âä®ÊèêÂèñÂô®</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background: #f5f5f5;
            line-height: 1.6;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .step {
            margin: 20px 0;
            padding: 15px;
            border-left: 4px solid #007acc;
            background: #f8f9fa;
            border-radius: 0 5px 5px 0;
        }
        .button {
            background: #007acc;
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin: 10px 5px;
            transition: background 0.3s;
        }
        .button:hover {
            background: #005a9e;
        }
        .button:disabled {
            background: #ccc;
            cursor: not-allowed;
        }
        .status {
            margin: 20px 0;
            padding: 15px;
            border-radius: 5px;
            display: none;
        }
        .status.success {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }
        .status.error {
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }
        .status.info {
            background: #d1ecf1;
            border: 1px solid #bee5eb;
            color: #0c5460;
        }
        code {
            background: #f8f9fa;
            padding: 2px 6px;
            border-radius: 3px;
            font-family: 'Courier New', monospace;
        }
        .highlight {
            background: #fff3cd;
            padding: 10px;
            border-radius: 5px;
            border-left: 4px solid #ffc107;
            margin: 10px 0;
        }
        .spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #007acc;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üç™ Augment Cookie Ëá™Âä®ÊèêÂèñÂô®</h1>
        <p>Ëøô‰∏™Â∑•ÂÖ∑Â∞ÜÂ∏ÆÂä©ÊÇ®Ëá™Âä®ÊèêÂèñAugmentÁöÑsession cookieÔºåÊó†ÈúÄÊâãÂä®Â§çÂà∂Á≤òË¥¥„ÄÇ</p>

        <div class="step">
            <h3>Ê≠•È™§ 1: ÁôªÂΩï Augment</h3>
            <p>È¶ñÂÖàÁ°Æ‰øùÊÇ®Â∑≤ÁªèÁôªÂΩïÂà∞Augment„ÄÇÂ¶ÇÊûúËøòÊ≤°ÊúâÁôªÂΩïÔºåËØ∑ÁÇπÂáª‰∏ãÈù¢ÁöÑÊåâÈíÆ„ÄÇ</p>
            <button class="button" onclick="openAugmentLogin()">üåê ÊâìÂºÄ Augment ÁôªÂΩï</button>
        </div>

        <div class="step">
            <h3>Ê≠•È™§ 2: Ëá™Âä®ÊèêÂèñ Cookie</h3>
            <p>ÁôªÂΩïÂÆåÊàêÂêéÔºåÈÄâÊã©ÊèêÂèñÊñπÊ≥ïÔºö</p>
            <button class="button" id="apiExtractBtn" onclick="extractFromApi()">üöÄ ‰ªéAPIÂìçÂ∫îÂ§¥ÊèêÂèñÔºàÊé®ËçêÔºâ</button>
            <button class="button" id="extractBtn" onclick="extractCookies()">üîÑ ‰ªéÊµèËßàÂô®ÊèêÂèñ</button>
        </div>

        <div id="status" class="status">
            <span id="statusMessage"></span>
        </div>

        <div class="step">
            <h3>üìã ÊèêÂèñÊñπÊ≥ïËØ¥Êòé</h3>
            <div class="highlight">
                <strong>üöÄ APIÂìçÂ∫îÂ§¥ÊèêÂèñÔºàÊé®ËçêÔºâÔºö</strong>
                <ul>
                    <li>Áõ¥Êé•‰ªé <code>https://app.augmentcode.com/api/user</code> ÁöÑÂìçÂ∫îÂ§¥ÊèêÂèñ</li>
                    <li>Ëé∑ÂèñÊúÄÊñ∞ÁöÑ <code>_session</code> ÂÄº</li>
                    <li>Êõ¥ÂáÜÁ°Æ„ÄÅÊõ¥ÂèØÈù†</li>
                    <li>Ëá™Âä®Â§ÑÁêÜcookieÊ†ºÂºè</li>
                </ul>

                <strong>üîÑ ÊµèËßàÂô®ÊèêÂèñÔºàÂ§áÁî®ÔºâÔºö</strong>
                <ul>
                    <li>‰ªéÂΩìÂâçÊµèËßàÂô®ÁöÑcookie‰∏≠ÊèêÂèñ</li>
                    <li>ÈÄÇÁî®‰∫éAPIÊñπÊ≥ïÂ§±Ë¥•ÁöÑÊÉÖÂÜµ</li>
                    <li>ÈúÄË¶ÅÁ°Æ‰øùÂ∑≤Âú®Âêå‰∏ÄÊµèËßàÂô®‰∏≠ÁôªÂΩï</li>
                </ul>

                <strong>üìã ÊâãÂä®ÊèêÂèñÔºàÊúÄÂêéÂ§áÁî®ÔºâÔºö</strong>
                <ol>
                    <li>Âú®AugmentÈ°µÈù¢Êåâ <code>F12</code> ÊâìÂºÄÂºÄÂèëËÄÖÂ∑•ÂÖ∑</li>
                    <li>ÂàáÊç¢Âà∞ <code>Network</code> Ê†áÁ≠æÈ°µ</li>
                    <li>Âà∑Êñ∞È°µÈù¢ÊàñËÆøÈóÆ <code>/api/user</code></li>
                    <li>Êü•ÁúãËØ∑Ê±ÇÁöÑ <code>set-cookie</code> ÂìçÂ∫îÂ§¥</li>
                    <li>Â§çÂà∂ <code>_session</code> ÁöÑÂÄº</li>
                </ol>
            </div>
        </div>

        <div class="step">
            <h3>üîß È´òÁ∫ßÈÄâÈ°π</h3>
            <p>Â¶ÇÊûúÊÇ®ÊòØÂºÄÂèëËÄÖÔºåÂèØ‰ª•‰ΩøÁî®Êàë‰ª¨ÁöÑJavaScriptÊèêÂèñËÑöÊú¨Ôºö</p>
            <button class="button" onclick="showExtractorScript()">üìú ÊòæÁ§∫ÊèêÂèñËÑöÊú¨</button>
            <div id="scriptContainer" style="display: none; margin-top: 15px;">
                <p>Âú®AugmentÈ°µÈù¢ÁöÑÊéßÂà∂Âè∞‰∏≠ËøêË°å‰ª•‰∏ãËÑöÊú¨Ôºö</p>
                <textarea id="extractorScript" readonly style="width: 100%; height: 150px; font-family: monospace; font-size: 12px;"></textarea>
                <button class="button" onclick="copyScript()">üìã Â§çÂà∂ËÑöÊú¨</button>
            </div>
        </div>
    </div>

    <script>
        let isExtracting = false;

        function openAugmentLogin() {
            window.open('https://app.augmentcode.com', '_blank');
            showStatus('ËØ∑Âú®Êñ∞Á™óÂè£‰∏≠ÂÆåÊàêÁôªÂΩïÔºåÁÑ∂ÂêéËøîÂõûÊ≠§È°µÈù¢ÁÇπÂáª"Ëá™Âä®ÊèêÂèñ Cookie"', 'info');
        }

        async function extractFromApi() {
            if (isExtracting) return;

            isExtracting = true;
            const apiExtractBtn = document.getElementById('apiExtractBtn');
            const originalText = apiExtractBtn.textContent;

            apiExtractBtn.disabled = true;
            apiExtractBtn.innerHTML = '<span class="spinner"></span> Ê≠£Âú®‰ªéAPIÊèêÂèñ...';

            showStatus('üöÄ Ê≠£Âú®‰ªéAPIÂìçÂ∫îÂ§¥ÊèêÂèñ_session...', 'info');

            try {
                // È¶ñÂÖàËé∑ÂèñÂΩìÂâçÈ°µÈù¢ÁöÑcookies‰Ωú‰∏∫Âü∫Á°Ä
                const currentCookies = document.cookie;
                console.log('üìã Current cookies:', currentCookies);

                // ÂèëÈÄÅAPIÊèêÂèñËØ∑Ê±Ç
                const response = await fetch('/api-extract', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        action: 'extract-from-api',
                        cookies: currentCookies
                    })
                });

                const result = await response.json();
                console.log('üì° API extraction result:', result);

                if (result.success) {
                    showStatus('‚úÖ ‰ªéAPIÊàêÂäüÊèêÂèñ_sessionÔºÅVSCodeÂ∞ÜËá™Âä®ÈÖçÁΩÆËÆ§ËØÅ„ÄÇ', 'success');

                    // Ëá™Âä®ÂÖ≥Èó≠È°µÈù¢
                    setTimeout(() => {
                        if (confirm('ËÆ§ËØÅÈÖçÁΩÆÊàêÂäüÔºÅÊòØÂê¶ÂÖ≥Èó≠Ê≠§È°µÈù¢Ôºü')) {
                            window.close();
                        }
                    }, 3000);
                } else {
                    showStatus('‚ùå APIÊèêÂèñÂ§±Ë¥•: ' + result.message + '\\n\\nÂ∞ùËØï‰ΩøÁî®ÊµèËßàÂô®ÊèêÂèñÊñπÊ≥ï', 'error');

                    // ÊèêÁ§∫Áî®Êà∑Â∞ùËØïÂÖ∂‰ªñÊñπÊ≥ï
                    setTimeout(() => {
                        if (confirm('APIÊèêÂèñÂ§±Ë¥•ÔºåÊòØÂê¶Â∞ùËØïÊµèËßàÂô®ÊèêÂèñÊñπÊ≥ïÔºü')) {
                            extractCookies();
                        }
                    }, 2000);
                }

            } catch (error) {
                console.error('APIÊèêÂèñÈîôËØØ:', error);
                showStatus('‚ùå APIÊèêÂèñÂ§±Ë¥•: ' + error.message + '\\n\\nËØ∑Â∞ùËØïÊµèËßàÂô®ÊèêÂèñÊñπÊ≥ï', 'error');

                // ÊèêÁ§∫Áî®Êà∑Â∞ùËØïÂÖ∂‰ªñÊñπÊ≥ï
                setTimeout(() => {
                    if (confirm('APIÊèêÂèñÂ§±Ë¥•ÔºåÊòØÂê¶Â∞ùËØïÊµèËßàÂô®ÊèêÂèñÊñπÊ≥ïÔºü')) {
                        extractCookies();
                    }
                }, 2000);
            } finally {
                isExtracting = false;
                apiExtractBtn.disabled = false;
                apiExtractBtn.textContent = originalText;
            }
        }

        async function extractCookies() {
            if (isExtracting) return;

            isExtracting = true;
            const extractBtn = document.getElementById('extractBtn');
            const originalText = extractBtn.textContent;

            extractBtn.disabled = true;
            extractBtn.innerHTML = '<span class="spinner"></span> Ê≠£Âú®ÊèêÂèñ...';

            showStatus('Ê≠£Âú®Â∞ùËØïËá™Âä®ÊèêÂèñcookies...', 'info');

            try {
                // ÊñπÊ≥ï1: Â∞ùËØï‰ªéÂΩìÂâçÈ°µÈù¢Ëé∑ÂèñcookiesÔºàÂ¶ÇÊûúÁî®Êà∑Âú®Âêå‰∏ÄÊµèËßàÂô®‰∏≠Ôºâ
                let cookies = '';

                // Ê£ÄÊü•ÊòØÂê¶ÊúâÂèØÁî®ÁöÑcookies
                if (document.cookie) {
                    cookies = document.cookie;
                    console.log('Found cookies:', cookies);
                }

                // ÊñπÊ≥ï2: ÊèêÁ§∫Áî®Êà∑ÊâãÂä®Ëé∑Âèñcookies
                if (!cookies || !cookies.includes('_session=')) {
                    showStatus('Êú™ËÉΩËá™Âä®Ëé∑ÂèñcookiesÔºåËØ∑‰ΩøÁî®ÊâãÂä®ÊñπÊ≥ï', 'error');

                    // ÊòæÁ§∫ËØ¶ÁªÜÁöÑÊâãÂä®ÊåáÂØº
                    const manualInstructions = \`
ËØ∑ÊåâÁÖß‰ª•‰∏ãÊ≠•È™§ÊâãÂä®Ëé∑ÂèñcookiesÔºö

1. ÊâìÂºÄÊñ∞Ê†áÁ≠æÈ°µËÆøÈóÆ: https://app.augmentcode.com
2. Á°Æ‰øùÊÇ®Â∑≤ÁôªÂΩï
3. ÊåâF12ÊâìÂºÄÂºÄÂèëËÄÖÂ∑•ÂÖ∑
4. Âú®Console‰∏≠ËæìÂÖ•: document.cookie
5. Â§çÂà∂ËæìÂá∫ÁªìÊûú
6. ÁÇπÂáª‰∏ãÈù¢ÁöÑ"ÊâãÂä®ËæìÂÖ•Cookie"ÊåâÈíÆ
                    \`;

                    if (confirm(manualInstructions + '\\n\\nÁÇπÂáªÁ°ÆÂÆöÊâìÂºÄAugmentÈ°µÈù¢')) {
                        window.open('https://app.augmentcode.com', '_blank');
                    }

                    // Êèê‰æõÊâãÂä®ËæìÂÖ•ÈÄâÈ°π
                    setTimeout(() => {
                        const manualCookies = prompt('ËØ∑Á≤òË¥¥‰ªéAugmentÈ°µÈù¢Ëé∑ÂèñÁöÑcookies:');
                        if (manualCookies && manualCookies.includes('_session=')) {
                            sendCookiesToVSCode(manualCookies);
                        } else if (manualCookies) {
                            showStatus('‚ùå Êó†ÊïàÁöÑcookies - ÂøÖÈ°ªÂåÖÂê´_session=', 'error');
                        }
                    }, 1000);

                } else {
                    // ÂèëÈÄÅcookiesÂà∞VSCode
                    await sendCookiesToVSCode(cookies);
                }

            } catch (error) {
                console.error('ÊèêÂèñÈîôËØØ:', error);
                showStatus('‚ùå Ëá™Âä®ÊèêÂèñÂ§±Ë¥•: ' + error.message, 'error');
            } finally {
                isExtracting = false;
                extractBtn.disabled = false;
                extractBtn.textContent = originalText;
            }
        }

        async function sendCookiesToVSCode(cookies) {
            try {
                showStatus('Ê≠£Âú®ÂèëÈÄÅcookiesÂà∞VSCode...', 'info');

                const response = await fetch('/extract-session', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ cookies: cookies })
                });

                const result = await response.json();

                if (result.success) {
                    showStatus('‚úÖ CookieÊèêÂèñÊàêÂäüÔºÅVSCodeÂ∞ÜËá™Âä®ÈÖçÁΩÆËÆ§ËØÅ„ÄÇÊÇ®ÂèØ‰ª•ÂÖ≥Èó≠Ê≠§È°µÈù¢„ÄÇ', 'success');

                    // Ëá™Âä®ÂÖ≥Èó≠È°µÈù¢
                    setTimeout(() => {
                        if (confirm('ËÆ§ËØÅÈÖçÁΩÆÊàêÂäüÔºÅÊòØÂê¶ÂÖ≥Èó≠Ê≠§È°µÈù¢Ôºü')) {
                            window.close();
                        }
                    }, 3000);
                } else {
                    showStatus('‚ùå ' + result.message, 'error');
                }
            } catch (error) {
                console.error('ÂèëÈÄÅÈîôËØØ:', error);
                showStatus('‚ùå ÂèëÈÄÅÂ§±Ë¥•: ' + error.message, 'error');
            }
        }

        function showStatus(message, type) {
            const statusDiv = document.getElementById('status');
            const statusMessage = document.getElementById('statusMessage');

            statusMessage.textContent = message;
            statusDiv.className = 'status ' + type;
            statusDiv.style.display = 'block';

            // Ëá™Âä®ÈöêËóèinfoÁ±ªÂûãÁöÑÊ∂àÊÅØ
            if (type === 'info') {
                setTimeout(() => {
                    statusDiv.style.display = 'none';
                }, 5000);
            }
        }

        function showExtractorScript() {
            const container = document.getElementById('scriptContainer');
            const textarea = document.getElementById('extractorScript');

            const script = \`// Augment Cookie Extractor
(function() {
    console.log('üîç Ê≠£Âú®ÊèêÂèñAugment cookies...');

    const cookies = document.cookie;
    const domain = window.location.hostname;

    console.log('üåê ÂüüÂêç:', domain);
    console.log('üìä CookieÊï∞Èáè:', document.cookie.split(';').length);

    if (!cookies.includes('_session=')) {
        console.error('‚ùå Êú™ÊâæÂà∞session cookie„ÄÇËØ∑ÂÖàÁôªÂΩï„ÄÇ');
        alert('‚ùå ËØ∑ÂÖàÁôªÂΩïAugmentÔºåÁÑ∂ÂêéÈáçÊñ∞ËøêË°åÊ≠§ËÑöÊú¨„ÄÇ');
        return null;
    }

    console.log('‚úÖ ÊâæÂà∞session cookieÔºÅ');
    console.log('üìã Ë¶ÅÂ§çÂà∂ÁöÑCookies:');
    console.log('--- Â§çÂà∂‰∏ãÈù¢ÁöÑÂÜÖÂÆπ ---');
    console.log(cookies);
    console.log('--- Â§çÂà∂‰∏äÈù¢ÁöÑÂÜÖÂÆπ ---');

    // Â∞ùËØïÂ§çÂà∂Âà∞Ââ™Ë¥¥Êùø
    if (navigator.clipboard && window.isSecureContext) {
        navigator.clipboard.writeText(cookies).then(() => {
            console.log('‚úÖ CookiesÂ∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥ÊùøÔºÅ');
            alert('‚úÖ CookiesÂ∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥ÊùøÔºÅËØ∑Âú®VSCode‰∏≠Á≤òË¥¥„ÄÇ');
        }).catch(err => {
            console.log('‚ö†Ô∏è Êó†Ê≥ïÂ§çÂà∂Âà∞Ââ™Ë¥¥Êùø:', err);
            alert('‚ö†Ô∏è ËØ∑ÊâãÂä®‰ªéÊéßÂà∂Âè∞Â§çÂà∂cookies„ÄÇ');
        });
    } else {
        console.log('‚ö†Ô∏è Ââ™Ë¥¥Êùø‰∏çÂèØÁî®„ÄÇËØ∑ÊâãÂä®Â§çÂà∂„ÄÇ');
        alert('‚ö†Ô∏è ËØ∑ÊâãÂä®‰ªéÊéßÂà∂Âè∞Â§çÂà∂cookies„ÄÇ');
    }

    return cookies;
})();\`;

            textarea.value = script;
            container.style.display = container.style.display === 'none' ? 'block' : 'none';
        }

        function copyScript() {
            const textarea = document.getElementById('extractorScript');
            textarea.select();
            document.execCommand('copy');
            showStatus('‚úÖ ËÑöÊú¨Â∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø', 'success');
        }

        // È°µÈù¢Âä†ËΩΩÊó∂ÁöÑÊèêÁ§∫
        window.onload = function() {
            showStatus('Ê¨¢Ëøé‰ΩøÁî®Augment CookieËá™Âä®ÊèêÂèñÂô®ÔºÅËØ∑ÂÖàÁ°Æ‰øùÊÇ®Â∑≤ÁôªÂΩïAugment„ÄÇ', 'info');
        };
    </script>
</body>
</html>
        `;

        res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
        res.end(html);
    }

    private handleApiExtraction(req: http.IncomingMessage, res: http.ServerResponse, resolve: (value: WebAuthResult) => void, reject: (reason?: any) => void) {
        if (req.method === 'POST') {
            let body = '';
            req.on('data', chunk => {
                body += chunk.toString();
            });

            req.on('end', async () => {
                try {
                    const data = JSON.parse(body);
                    // Â§ÑÁêÜAPIÊèêÂèñËØ∑Ê±Ç

                    if (data.action === 'extract-from-api') {
                        // Â∞ùËØï‰ªéAPIÂìçÂ∫îÂ§¥ÊèêÂèñ_session
                        const sessionCookie = await this.extractSessionFromApi(data.cookies);

                        if (sessionCookie) {
                            res.writeHead(200, {
                                'Content-Type': 'application/json',
                                'Access-Control-Allow-Origin': '*'
                            });
                            res.end(JSON.stringify({
                                success: true,
                                message: 'Session extracted from API response',
                                sessionCookie: sessionCookie
                            }));

                            this.cleanup();
                            resolve({
                                success: true,
                                cookies: sessionCookie
                            });
                        } else {
                            res.writeHead(400, {
                                'Content-Type': 'application/json',
                                'Access-Control-Allow-Origin': '*'
                            });
                            res.end(JSON.stringify({
                                success: false,
                                message: 'Failed to extract session from API'
                            }));
                        }
                    } else {
                        res.writeHead(400, {
                            'Content-Type': 'application/json',
                            'Access-Control-Allow-Origin': '*'
                        });
                        res.end(JSON.stringify({
                            success: false,
                            message: 'Invalid action'
                        }));
                    }
                } catch (error) {
                    console.error('API extraction error:', error);
                    res.writeHead(500, {
                        'Content-Type': 'application/json',
                        'Access-Control-Allow-Origin': '*'
                    });
                    res.end(JSON.stringify({
                        success: false,
                        message: 'Server error: ' + error
                    }));
                }
            });
        } else if (req.method === 'OPTIONS') {
            // Â§ÑÁêÜCORSÈ¢ÑÊ£ÄËØ∑Ê±Ç
            res.writeHead(200, {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type'
            });
            res.end();
        } else {
            res.writeHead(405, { 'Content-Type': 'text/plain' });
            res.end('Method Not Allowed');
        }
    }

    private async extractSessionFromApi(existingCookies?: string): Promise<string | null> {
        try {
            console.log('üîç Attempting to extract session from API...');

            // ‰ΩøÁî®Node.jsÁöÑhttpsÊ®°ÂùóËøõË°åËØ∑Ê±Ç
            return new Promise((resolve) => {
                const options = {
                    hostname: 'app.augmentcode.com',
                    port: 443,
                    path: '/api/user',
                    method: 'GET',
                    headers: {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                        'Accept': 'application/json, text/plain, */*',
                        'Accept-Language': 'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7',
                        'Referer': 'https://app.augmentcode.com/',
                        'Origin': 'https://app.augmentcode.com',
                        ...(existingCookies && { 'Cookie': existingCookies })
                    }
                };

                const req = https.request(options, (res) => {
                    console.log('üì° API Response status:', res.statusCode);
                    console.log('üì° API Response headers:', res.headers);

                    // Ê£ÄÊü•set-cookieÂìçÂ∫îÂ§¥
                    const setCookieHeaders = res.headers['set-cookie'];
                    if (setCookieHeaders) {
                        console.log('üç™ Found set-cookie headers:', setCookieHeaders);

                        // Êü•Êâæ_session cookie
                        for (const cookieHeader of setCookieHeaders) {
                            const sessionMatch = cookieHeader.match(/_session=([^;]+)/);
                            if (sessionMatch) {
                                const sessionValue = sessionMatch[1];
                                console.log('‚úÖ Extracted _session value:', sessionValue.substring(0, 20) + '...');

                                // ÊûÑÂª∫ÂÆåÊï¥ÁöÑcookieÂ≠óÁ¨¶‰∏≤
                                const fullCookie = `_session=${sessionValue}`;

                                // Â¶ÇÊûúÊúâÂÖ∂‰ªñÊúâÁî®ÁöÑcookiesÔºå‰πüÂåÖÂê´ËøõÊù•
                                if (existingCookies) {
                                    const otherCookies = existingCookies.split(';')
                                        .map(c => c.trim())
                                        .filter(c => !c.startsWith('_session='))
                                        .join('; ');

                                    resolve(otherCookies ? `${fullCookie}; ${otherCookies}` : fullCookie);
                                    return;
                                }

                                resolve(fullCookie);
                                return;
                            }
                        }
                    }

                    // ËØªÂèñÂìçÂ∫î‰Ωì
                    let responseBody = '';
                    res.on('data', (chunk) => {
                        responseBody += chunk;
                    });

                    res.on('end', () => {
                        console.log('üìÑ API Response body length:', responseBody.length);

                        // Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÁôªÂΩï
                        if (res.statusCode === 401 || responseBody.includes('login') || responseBody.includes('unauthorized')) {
                            console.log('‚ùå API indicates user is not logged in');
                            resolve(null);
                            return;
                        }

                        console.log('‚ö†Ô∏è No _session found in API response');
                        resolve(null);
                    });
                });

                req.on('error', (error) => {
                    console.error('‚ùå Error extracting session from API:', error);
                    resolve(null);
                });

                // ËÆæÁΩÆË∂ÖÊó∂
                req.setTimeout(10000, () => {
                    console.error('‚ùå API request timeout');
                    req.destroy();
                    resolve(null);
                });

                req.end();
            });

        } catch (error) {
            console.error('‚ùå Error extracting session from API:', error);
            return null;
        }
    }

    private cleanup() {
        if (this.server) {
            this.server.close();
            this.server = null;
        }
    }

    dispose() {
        this.cleanup();
    }
}
